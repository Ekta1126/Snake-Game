import java.util.*;
import javax.imageio.ImageIO;
import java.util.Timer;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import javax.swing.*;

/**
 * Class representing the Snake game.
 */
class Game extends JPanel {

    /**
     * Timer used to control the game loop.
     */
    private Timer timer;

    /**
     * Instance of the Snake class representing the snake in the game.
     */
    private Snake snake;

    /**
     * Point representing the location of the cherry in the game.
     */
    private Point cherry;

    /**
     * Current score of the player.
     */
    private int points = 0;

    /**
     * Best score achieved by the player.
     */
    private int best = 0;

    /**
     * Image representing the cherry.
     */
    private BufferedImage image;

    /**
     * Current game status (not started, running, paused, or game over).
     */
    private GameStatus status;

    /**
     * Flag indicating whether the cherry image was loaded successfully.
     */
    private boolean didLoadCherryImage = true;

    /**
     * Font used for displaying the title.
     */
    private static Font FONT_M = new Font("Times new Roman", Font.PLAIN, 24);

    /**
     * Italicized font used for displaying instructions.
     */
    private static Font FONT_M_ITALIC = new Font("Times new Roman", Font.PLAIN, 24);

    /**
     * Font used for displaying the score and best score.
     */
    private static Font FONT_L = new Font("Times new Roman", Font.PLAIN, 84);

    /**
     * Larger font used for displaying the "GAME OVER" message.
     */
    private static Font FONT_XL = new Font("Times new Roman", Font.PLAIN, 100);

    /**
     * Width of the game window.
     */
    private static int WIDTH = 760;

    /**
     * Height of the game window.
     */
    private static int HEIGHT = 520;

    /**
     * Delay between game updates (in milliseconds).
     */
    private static int DELAY = 50;

    /**
     * Constructor for the Game class.
     */
    public Game() {
        // Attempt to load the cherry image
        try {
            image = ImageIO.read(new File("cherry.png"));
        } catch (IOException e) {
            didLoadCherryImage = false; // Indicate that image loading failed
        }

        // Add a key listener to handle keyboard input
        addKeyListener(new KeyListener());
        setFocusable(true); // Set the panel as focusable

        // Set background color and double buffering
        setBackground(new Color(34, 139, 34));
        setDoubleBuffered(true);

        // Create a new Snake instance
        snake = new Snake(WIDTH / 2, HEIGHT / 2);

        // Set initial game status to not started
        status = GameStatus.NOT_STARTED;

        // Repaint the panel to initialize the graphics
        repaint();
    }

    /**
     * Method to override the paintComponent method for custom rendering.
     *
     * @param g The Graphics object used for drawing.
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        render(g); // Render the game elements

        Toolkit.getDefaultToolkit().sync(); // Synchronize the display
    }

    /**
     * Method to update the game state and render the game elements.
     */
    private void update() {
        snake.move(); // Move the snake

        // Check if the snake has eaten the cherry
        if (cherry != null && snake.getHead().intersects(cherry, 20)) {
            snake.addTail(); // Add a new tail segment
            cherry = null; // Remove the cherry
            points++; // Increment the score
        }

        // If there is no cherry, spawn a new one
        if (cherry == null) {
            spawnCherry();
        }

        // Check for game over conditions
        checkForGameOver();
    }

    /**
     * Method to reset the game to its initial state.
     */
    private void reset()
